{"version":3,"sources":["../src/configure-store.js"],"names":["reducerMap","createReducer","initialState","handlers","reducer","state","action","hasOwnProperty","type","pushModel","model","namespace","reducers","renameReducers","Object","keys","reduce","lastRenameReducers","currentValue","createStore","requireModels","configModel","preloadedState","thunk","process","env","BUILD_TARGET","window","devToolsExtension","f","forEach","filename"],"mappings":";;;;;;;;;;;AAAA;;AAKA;;AAEA;;AAEA,IAAMA,UAAU,GAAG,EAAnB;;AAEA,SAASC,aAAT,CAAuBC,YAAvB,EAAqCC,QAArC,EAA+C;AAC7C,SAAO,SAASC,OAAT,GAA+C;AAAA,QAA9BC,KAA8B,uEAAtBH,YAAsB;AAAA,QAARI,MAAQ;;AACpD,QAAIH,QAAQ,CAACI,cAAT,CAAwBD,MAAM,CAACE,IAA/B,CAAJ,EAA0C;AACxC,aAAOL,QAAQ,CAACG,MAAM,CAACE,IAAR,CAAR,CAAsBH,KAAtB,EAA6BC,MAA7B,CAAP;AACD,KAFD,MAEO;AACL,aAAOD,KAAP;AACD;AACF,GAND;AAOD;AAED;;;;;AAGA,SAASI,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,yBAC4BA,KAD5B,CAChBC,SADgB;AAAA,MAChBA,SADgB,iCACJ,KADI;AAAA,MACGC,QADH,GAC4BF,KAD5B,CACGE,QADH;AAAA,qBAC4BF,KAD5B,CACaL,KADb;AAAA,MACaA,KADb,6BACqB,EADrB;AAExB,MAAMQ,cAAc,GAAG,EAAvB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,QAAQ,IAAI,EAAxB,EAA4BI,MAA5B,CAAmC,UAACC,kBAAD,EAAqBC,YAArB,EAAsC;AACvED,IAAAA,kBAAkB,WAAIN,SAAJ,cAAiBO,YAAjB,EAAlB,GAAqDN,QAAQ,CAACM,YAAD,CAA7D;AACA,WAAOD,kBAAP;AACD,GAHD,EAGGJ,cAHH;AAKAb,EAAAA,UAAU,CAACW,SAAD,CAAV,GAAwBV,aAAa,CAACI,KAAD,EAAQQ,cAAR,CAArC;AACD;AAED;;;;;AAGA,SAASM,WAAT,CAAqBC,aAArB,EAAoC;AAClCC,EAAAA,WAAW,CAACD,aAAD,CAAX;AACA,SAAO,UAAAE,cAAc,EAAI;AACvB,WAAO,wBACL,4BAAgBtB,UAAhB,CADK,EAELsB,cAFK,EAGL,oBACE,4BAAgBC,sBAAhB,CADF,EAEEC,OAAO,CAACC,GAAR,CAAYC,YAAZ,KAA6B,QAA7B,GACIC,MAAM,CAACC,iBAAP,GACED,MAAM,CAACC,iBAAP,EADF,GAEE,UAAAC,CAAC;AAAA,aAAIA,CAAJ;AAAA,KAHP,GAII,UAAAA,CAAC;AAAA,aAAIA,CAAJ;AAAA,KANP,CAHK,CAAP;AAYD,GAbD;AAcD;AAED;;;;;;AAIA,SAASR,WAAT,CAAqBD,aAArB,EAAoC;AAClCA,EAAAA,aAAa,CAACL,IAAd,GAAqBe,OAArB,CAA6B,UAAAC,QAAQ,EAAI;AACvCtB,IAAAA,SAAS,CAACW,aAAa,CAACW,QAAD,CAAb,WAAD,CAAT;AACD,GAFD;AAGD","sourcesContent":["import {\n  applyMiddleware,\n  compose,\n  createStore as reduxCreateStore\n} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { combineReducers } from \"redux\";\nimport { Model } from \"./model\";\n\nconst reducerMap = {};\n\nfunction createReducer(initialState, handlers) {\n  return function reducer(state = initialState, action) {\n    if (handlers.hasOwnProperty(action.type)) {\n      return handlers[action.type](state, action);\n    } else {\n      return state;\n    }\n  };\n}\n\n/**\n * push model and create reducer to reducer map\n */\nfunction pushModel(model) {\n  const { namespace = \"app\", reducers, state = {} } = model;\n  const renameReducers = {};\n  Object.keys(reducers || {}).reduce((lastRenameReducers, currentValue) => {\n    lastRenameReducers[`${namespace}/${currentValue}`] = reducers[currentValue];\n    return lastRenameReducers;\n  }, renameReducers);\n\n  reducerMap[namespace] = createReducer(state, renameReducers);\n}\n\n/**\n * create Store with collect reducer map\n */\nfunction createStore(requireModels) {\n  configModel(requireModels);\n  return preloadedState => {\n    return reduxCreateStore(\n      combineReducers(reducerMap),\n      preloadedState,\n      compose(\n        applyMiddleware(thunk),\n        process.env.BUILD_TARGET === \"client\"\n          ? window.devToolsExtension\n            ? window.devToolsExtension()\n            : f => f\n          : f => f\n      )\n    );\n  };\n}\n\n/**\n * config an directory contains all model files for collecting these models\n * and create reducer per model, into reducer map.\n */\nfunction configModel(requireModels) {\n  requireModels.keys().forEach(filename => {\n    pushModel(requireModels(filename).default);\n  });\n}\n\nexport { pushModel, configModel, createStore };\n"],"file":"configure-store.js"}