{"version":3,"sources":["../src/render.js"],"names":["render","req","res","routes","document","assets","customRenderer","rest","Doc","DefaultDocument","context","path","match","initialProps","status","redirectTo","redirect","originalUrl","replace","renderPage","fn","modPage","defaultRenderer","element","html","ReactDOMServer","renderToString","renderer","asyncOrSyncRender","url","Nut","utils","isPromise","renderedContent","helmet","Helmet","renderStatic","reactRouterMatch","getInitialProps","docProps","doc","renderToStaticMarkup","Page","props"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { matchPath, StaticRouter } from \"react-router-dom\";\r\nimport { DefaultDocument } from \"./default-document\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport Helmet from \"react-helmet\";\r\nimport { Nut } from \"./nut\";\r\nimport * as utils from \"./utils\";\r\nimport { loadInitialProps } from \"./load-initial-props\";\r\n\r\n/**\r\n * rendering function on server\r\n *\r\n * match route config by req.url and find relative page Component\r\n * call Component.getInitProps to get page init data, so we can render\r\n * page to html. render Document Compoent wrapping page's html to html\r\n * and send it to client\r\n */\r\nexport async function render({\r\n  req,\r\n  res,\r\n  routes,\r\n  document,\r\n  assets,\r\n  customRenderer,\r\n  ...rest\r\n}) {\r\n  const Doc = document || DefaultDocument;\r\n  const context = {};\r\n  const { match, initialProps } = await loadInitialProps(routes, req.path, {\r\n    req,\r\n    res,\r\n    ...rest\r\n  });\r\n\r\n  if (!match) {\r\n    res.status(404);\r\n    return;\r\n  }\r\n\r\n  if (match.path === \"**\") {\r\n    res.status(404);\r\n  } else if (match && match.redirectTo && match.path) {\r\n    res.redirect(301, req.originalUrl.replace(match.path, match.redirectTo));\r\n    return;\r\n  }\r\n\r\n  const renderPage = async (fn = modPage) => {\r\n    // By default, we keep ReactDOMServer synchronous renderToString function\r\n    const defaultRenderer = element => ({\r\n      html: ReactDOMServer.renderToString(element)\r\n    });\r\n    const renderer = customRenderer || defaultRenderer;\r\n    const asyncOrSyncRender = renderer(\r\n      <StaticRouter location={req.url} context={context}>\r\n        {fn(Nut)({ routes, initialProps })}\r\n      </StaticRouter>\r\n    );\r\n\r\n    const renderedContent = utils.isPromise(asyncOrSyncRender)\r\n      ? await asyncOrSyncRender\r\n      : asyncOrSyncRender;\r\n    const helmet = Helmet.renderStatic();\r\n\r\n    return { helmet, ...renderedContent };\r\n  };\r\n\r\n  const reactRouterMatch = matchPath(req.url, match);\r\n\r\n  const { html, ...docProps } = await Doc.getInitialProps({\r\n    req,\r\n    res,\r\n    assets,\r\n    renderPage,\r\n    initialProps,\r\n    match: reactRouterMatch,\r\n    helmet: Helmet.renderStatic(),\r\n    ...rest\r\n  });\r\n\r\n  const doc = ReactDOMServer.renderToStaticMarkup(<Doc {...docProps} />);\r\n  return `<!doctype html>${doc.replace(\r\n    \"DO_NOT_DELETE_THIS_YOU_WILL_BREAK_YOUR_APP\",\r\n    html\r\n  )}`;\r\n}\r\n\r\nfunction modPage(Page) {\r\n  return props => <Page {...props} />;\r\n}\r\n"],"file":"render.js"}