{"version":3,"sources":["../src/async-load.js"],"names":["asyncLoad","loader","Placeholder","placeholder","Component","state","setState","AsyncComponent","load","then","updateState","ComponentFromState","props","ctx","getInitialProps","Promise","resolve","ResolvedComponent","default","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;AAGO,SAASA,SAAT,OAAyD;AAAA;;AAAA,MAApCC,MAAoC,QAApCA,MAAoC;AAAA,MAAfC,WAAe,QAA5BC,WAA4B;AAC9D,MAAIC,SAAS,GAAG,IAAhB;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,0FACU;AACNA,QAAAA,SAAS,EAAE;AADL,OADV;AAAA,gGAuBgB,YAAM;AAClB,YAAI,MAAKC,KAAL,CAAWD,SAAX,KAAyBA,SAA7B,EAAwC;AACtC,gBAAKE,QAAL,CAAc;AACZF,YAAAA,SAAS,EAATA;AADY,WAAd;AAGD;AACF,OA7BH;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAmBuB;AACnBG,QAAAA,cAAc,CAACC,IAAf,GAAsBC,IAAtB,CAA2B,KAAKC,WAAhC;AACD;AArBH;AAAA;AAAA,+BA+BW;AAAA,YACYC,kBADZ,GACmC,KAAKN,KADxC,CACCD,SADD;;AAGP,YAAIO,kBAAJ,EAAwB;AACtB,iBAAO,6BAAC,kBAAD,EAAwB,KAAKC,KAA7B,CAAP;AACD;;AAED,YAAIV,WAAJ,EAAiB;AACf,iBAAO,6BAAC,WAAD,EAAiB,KAAKU,KAAtB,CAAP;AACD;;AAED,eAAO,IAAP;AACD;AA3CH;AAAA;AAAA,sCAKyBC,GALzB,EAK8B;AAC1B,YAAIT,SAAS,KAAK,IAAlB,EAAwB;AACtB,iBAAOA,SAAS,CAACU,eAAV,GACHV,SAAS,CAACU,eAAV,CAA0BD,GAA1B,CADG,GAEHE,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAFJ;AAGD;AACF;AAXH;AAAA;AAAA,6BAagB;AACZ,eAAOf,MAAM,GAAGQ,IAAT,CAAc,UAAAQ,iBAAiB,EAAI;AACxCb,UAAAA,SAAS,GAAGa,iBAAiB,CAACC,OAAlB,IAA6BD,iBAAzC;AACD,SAFM,CAAP;AAGD;AAjBH;AAAA;AAAA,IAAoCE,oBAApC;AA6CD","sourcesContent":["import React, { PureComponent } from \"react\";\r\n\r\n/**\r\n * asynchronously load component\r\n */\r\nexport function asyncLoad({ loader, placeholder: Placeholder }) {\r\n  let Component = null;\r\n  return class AsyncComponent extends PureComponent {\r\n    state = {\r\n      Component: null\r\n    };\r\n\r\n    static getInitialProps(ctx) {\r\n      if (Component !== null) {\r\n        return Component.getInitialProps\r\n          ? Component.getInitialProps(ctx)\r\n          : Promise.resolve(null);\r\n      }\r\n    }\r\n\r\n    static load() {\r\n      return loader().then(ResolvedComponent => {\r\n        Component = ResolvedComponent.default || ResolvedComponent;\r\n      });\r\n    }\r\n\r\n    componentWillMount() {\r\n      AsyncComponent.load().then(this.updateState);\r\n    }\r\n\r\n    updateState = () => {\r\n      if (this.state.Component !== Component) {\r\n        this.setState({\r\n          Component\r\n        });\r\n      }\r\n    };\r\n\r\n    render() {\r\n      const { Component: ComponentFromState } = this.state;\r\n\r\n      if (ComponentFromState) {\r\n        return <ComponentFromState {...this.props} />;\r\n      }\r\n\r\n      if (Placeholder) {\r\n        return <Placeholder {...this.props} />;\r\n      }\r\n\r\n      return null;\r\n    }\r\n  };\r\n}\r\n"],"file":"async-load.js"}