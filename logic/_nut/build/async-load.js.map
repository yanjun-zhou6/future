{"version":3,"sources":["../src/async-load.js"],"names":["asyncLoad","loader","Placeholder","placeholder","Component","state","setState","AsyncComponent","load","then","updateState","ComponentFromState","props","ctx","getInitialProps","Promise","resolve","ResolvedComponent","PureComponent"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;AAGO,SAASA,SAAT,OAAyD;AAAA;;AAAA,MAApCC,MAAoC,QAApCA,MAAoC;AAAA,MAAfC,WAAe,QAA5BC,WAA4B;AAC9D,MAAIC,SAAS,GAAG,IAAhB;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,gGACU;AACNA,QAAAA,SAAS,EAAE;AADL,OADV;AAAA,sGAuBgB,YAAM;AAClB,YAAI,MAAKC,KAAL,CAAWD,SAAX,KAAyBA,SAA7B,EAAwC;AACtC,gBAAKE,QAAL,CAAc;AACZF,YAAAA,SAAS,EAATA;AADY,WAAd;AAGD;AACF,OA7BH;AAAA;AAAA;;AAAA;AAAA;AAAA,2CAmBuB;AACnBG,QAAAA,cAAc,CAACC,IAAf,GAAsBC,IAAtB,CAA2B,KAAKC,WAAhC;AACD;AArBH;AAAA;AAAA,+BA+BW;AAAA,YACYC,kBADZ,GACmC,KAAKN,KADxC,CACCD,SADD;;AAGP,YAAIO,kBAAJ,EAAwB;AACtB,iBAAO,gCAAC,kBAAD,EAAwB,KAAKC,KAA7B,CAAP;AACD;;AAED,YAAIV,WAAJ,EAAiB;AACf,iBAAO,gCAAC,WAAD,EAAiB,KAAKU,KAAtB,CAAP;AACD;;AAED,eAAO,IAAP;AACD;AA3CH;AAAA;AAAA,sCAKyBC,GALzB,EAK8B;AAC1B,YAAIT,SAAS,KAAK,IAAlB,EAAwB;AACtB,iBAAOA,SAAS,CAACU,eAAV,GACHV,SAAS,CAACU,eAAV,CAA0BD,GAA1B,CADG,GAEHE,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAFJ;AAGD;AACF;AAXH;AAAA;AAAA,6BAagB;AACZ,eAAOf,MAAM,GAAGQ,IAAT,CAAc,UAAAQ,iBAAiB,EAAI;AACxCb,UAAAA,SAAS,GAAGa,iBAAiB,WAAjB,IAA6BA,iBAAzC;AACD,SAFM,CAAP;AAGD;AAjBH;AAAA;AAAA,IAAoCC,oBAApC;AA6CD","sourcesContent":["import React, { PureComponent } from \"react\";\n\n/**\n * asynchronously load component\n */\nexport function asyncLoad({ loader, placeholder: Placeholder }) {\n  let Component = null;\n  return class AsyncComponent extends PureComponent {\n    state = {\n      Component: null\n    };\n\n    static getInitialProps(ctx) {\n      if (Component !== null) {\n        return Component.getInitialProps\n          ? Component.getInitialProps(ctx)\n          : Promise.resolve(null);\n      }\n    }\n\n    static load() {\n      return loader().then(ResolvedComponent => {\n        Component = ResolvedComponent.default || ResolvedComponent;\n      });\n    }\n\n    componentWillMount() {\n      AsyncComponent.load().then(this.updateState);\n    }\n\n    updateState = () => {\n      if (this.state.Component !== Component) {\n        this.setState({\n          Component\n        });\n      }\n    };\n\n    render() {\n      const { Component: ComponentFromState } = this.state;\n\n      if (ComponentFromState) {\n        return <ComponentFromState {...this.props} />;\n      }\n\n      if (Placeholder) {\n        return <Placeholder {...this.props} />;\n      }\n\n      return null;\n    }\n  };\n}\n"],"file":"async-load.js"}